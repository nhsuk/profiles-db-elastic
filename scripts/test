#!/bin/bash
get_es_stats() {
  echo 'Waiting for ES to start'
  until curl --output /dev/null --silent --head --fail http://es:9200; do
      printf '.'
      sleep 5
  done
  echo "ES has started"

  echo "Waiting for up to 60 seconds for the cluster status be at least yellow"
  curl --silent --output /dev/null "http://es:9200/_cluster/health?wait_for_status=yellow&timeout=60s"
  curl --silent "http://es:9200/_nodes/stats" > es-stats.json
  echo "Saved http://es:9200/_nodes/stats to es.stats.json"
  exit_status=0
}

validate_json() {
  FILE=$1
  echo "Validating $FILE"
  if ! jq '. | empty' "$FILE"; then
    echo "Unable to parse $FILE" >&2
    exit 1
  fi
}

test_max_file_descriptors() {
  echo  "Test max file descriptors"
  expected_max=1048576
  max_file_descriptors="$(jq '.. | .process?.max_file_descriptors? | select(. != null)' es-stats.json)"

  if [ "$max_file_descriptors" -eq $expected_max ]
  then
    echo "Max file descriptors test passed. Expected $expected_max, got $max_file_descriptors"
  else
    exit_status=1
    echo "Max file descriptors test failed. Expected $expected_max, got $max_file_descriptors"
  fi
}

test_number_of_docs() {
  echo "Test number of docs in index"
  expected_docs=9537
  number_of_docs="$(jq '.. | .docs?.count? | select(. != null)' es-stats.json)"

  echo "Number of DOCS: $number_of_docs"
  if [ "$number_of_docs" -eq $expected_docs ]
  then
    echo "Number of docs test passed. Expected $expected_docs and got $number_of_docs"
  else
    exit_status=1
    echo "Number of docs test failed. Expected $expected_docs but got $number_of_docs"
  fi
}

validate_json tmp/data/input/gp-data-merged.json
validate_json tmp/data/mapping/mapping.json

get_es_stats
test_max_file_descriptors
test_number_of_docs

exit $exit_status
